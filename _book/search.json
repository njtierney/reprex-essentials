[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Making (Rep)roducible (Ex)xamples with reprex",
    "section": "",
    "text": "library(knitr)\n\n(This is a reproduction of my blog post, “magic reprex”)\nMaking reproducible examples can be hard.\nThere’s a lot of things you need to consider. Like, making sure your environment is clean, the right packages are loaded, the code is formatted nicely, and images are the right resolution and dimension.\nGetting all of these ducks lined up can sometimes take a couple of minutes, if you have a nice tightly defined problem. Other times, it can take much, much longer. Say for example, if you had a variable loaded in your environment that you forgot how to create, and you didn’t realise it was so important and OH GOD HOW DID I EVEN DO THIS? Ahem.\nSo, after some sensible swearing and frustration, you might ask yourself something like:\n\nSurely there’s an easy, reproducible way to … make reproducible examples?\n\nEnter the R package reprex [CRAN] [GitHub], by Jenny Bryan.\nIn the fashion of the times right now, I’ll illustrate reprex with a gif, which shows the following things:\n\nTake your code, copy it to the clipboard.\nRun reprex, wait a moment for the code to execute.\nreprex creates a html preview of your code.\nA markdown chunk is also copied to the clipboard.\n\n\ninclude_graphics(\"assets/reprex-copy.gif\")\n\n\n\n\nGif of reprex copying code, running reprex, and demonstrating the html preview of the code text\n\n\n\n\nThis means you can copy this to say, GitHub (reprex(venue = \"gh\")) (the default) to help you file an issue:\n\ninclude_graphics(\"assets/reprex-github.gif\")\n\n\n\n\nGif of reprex copying code, running reprex, and demonstrating the html preview of the code text\n\n\n\n\nThere is also an option for Stack Overflow(reprex(venue = \"so\").\nHow does this work? reprex takes the section of copied code and then runs rmarkdown::render on it, which starts a fresh environment, and runs the code. This means that reprex will fail hard and fail early if your examples aren’t reproducible. If you don’t have the correct library loaded, it will show the error messages.\n\ninclude_graphics(\"assets/reprex-fail-1.gif\")\n\n\n\n\nGif of reprex copying code, running reprex, and demonstrating the html preview of the code text\n\n\n\n\nBut then when you fix that, by adding library calls to visdat, ggplot2 and naniar, and you get what you want:\n\ninclude_graphics(\"assets/reprex-success-1.gif\")\n\n\n\n\nGif of reprex copying code, running reprex, and demonstrating the html preview of the code text using visdat, naniar, and ggplot2 packages\n\n\n\n\nSo you know that when you run reprex, and it gives you a reproducible example, it will work!\nAlso worth mentioning is that rather magically, reprex also handles images. I didn’t even notice this at first. It was just one of those things where “it just works”. reprex handles this by uploading them to imgur using the knitr::imgur_upload function, which creates markdown links to the images.\nso\n\nlibrary(tidyverse)\n\n# run a lm\n\nlm_fit &lt;- lm(Sepal.Length ~ . , data = iris)\n\n# use broom to clean it up\n\nlibrary(broom)\n\nlm_augmented &lt;- augment(lm_fit)\n\nhead(lm_augmented)\n\n# Explore the fit of the model\n\nggplot(data = lm_augmented,\n   aes(x = .fitted,\n       y = Sepal.Length)) + \n  geom_point() \ngets turned into\nlibrary(tidyverse)\n#&gt; Loading tidyverse: ggplot2\n#&gt; Loading tidyverse: tibble\n#&gt; Loading tidyverse: tidyr\n#&gt; Loading tidyverse: readr\n#&gt; Loading tidyverse: purrr\n#&gt; Loading tidyverse: dplyr\n#&gt; Conflicts with tidy packages ----------------------------------------------\n#&gt; filter(): dplyr, stats\n#&gt; lag():    dplyr, stats\n\n# run a lm\n\nlm_fit &lt;- lm(Sepal.Length ~ . , data = iris)\n\n# use broom to clean it up\n\nlibrary(broom)\n\nlm_augmented &lt;- augment(lm_fit)\n\nhead(lm_augmented)\n#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  .fitted\n#&gt; 1          5.1         3.5          1.4         0.2  setosa 5.004788\n#&gt; 2          4.9         3.0          1.4         0.2  setosa 4.756844\n#&gt; 3          4.7         3.2          1.3         0.2  setosa 4.773097\n#&gt; 4          4.6         3.1          1.5         0.2  setosa 4.889357\n#&gt; 5          5.0         3.6          1.4         0.2  setosa 5.054377\n#&gt; 6          5.4         3.9          1.7         0.4  setosa 5.388886\n#&gt;      .se.fit      .resid       .hat    .sigma      .cooksd  .std.resid\n#&gt; 1 0.04479188  0.09521198 0.02131150 0.3077918 3.570856e-04  0.31367294\n#&gt; 2 0.05514933  0.14315645 0.03230694 0.3076565 1.251718e-03  0.47429637\n#&gt; 3 0.04690495 -0.07309695 0.02336968 0.3078349 2.317688e-04 -0.24106926\n#&gt; 4 0.05135928 -0.28935683 0.02801904 0.3069173 4.396118e-03 -0.95656076\n#&gt; 5 0.04736842 -0.05437691 0.02383379 0.3078627 1.309299e-04 -0.17937436\n#&gt; 6 0.05592364  0.01111427 0.03322050 0.3078956 7.772793e-06  0.03684044\n\n# Explore the fit of the model, looking \n\nggplot(data = lm_augmented,\n       aes(x = .fitted,\n           y = Sepal.Length)) + \n  geom_point() \n\n`![](http://i.imgur.com/h72ZEKG.png)`\nYou can even show the results of the session_info, for maximum reproducibility, by adding the argument: reprex::reprex(si = TRUE), which adds a super nifty drop down box for the session info.\n\ninclude_graphics(\"assets/reprex-si.gif\")\n\n\n\n\nGif of reprex copying code, running reprex, showing option SI = TRUE\n\n\n\n\nI really like these sorts of small tools in R. Squinting at a distance you might make the mistake of thinking:\n\nso what, it does this one little thing\n\nBut then when you’re actually up close, you realise this means that you don’t have to bend your brain around doing this thing, which can range from mildly annoying to mostly infuriating.\nYou save time and energy, and can focus more on doing what you want to do, and less on fighting against interruptions. This comic by Jason Heeris illustrates this point nicely, I think:\n\ninclude_graphics(\"assets/ProgrammerInterrupted.png\")\n\n\n\n\nWhy you shouldn’t interrupt a programmer\n\n\n\n\nOnce again thank you to Jenny Bryan for making our lives easier. Jenny will be joining the RStudio team this year and I am really looking forward to seeing what she gets up to.\nRead more about reprex on github here.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Making (Rep)roducible (Ex)xamples with `reprex`</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "reprex-essentials",
    "section": "",
    "text": "Preface\nThis is a book about getting your head around reproducible examples.",
    "crumbs": [
      "Preface"
    ]
  }
]